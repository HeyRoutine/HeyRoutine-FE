import React, { useState, useEffect } from 'react';
import styled from 'styled-components/native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';

import Header from '../../components/common/Header';
import CustomInput from '../../components/common/CustomInput';
import CustomButton from '../../components/common/CustomButton';
import { theme } from '../../styles/theme';
import { useAuthStore } from '../../store';
import { validateNickname } from '../../utils/validation';

const NicknameScreen = ({ navigation, route }: any) => {
  const [nickname, setNickname] = useState('');
  const [isNicknameValid, setIsNicknameValid] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');

  // Zustand ÌöåÏõêÍ∞ÄÏûÖ Ïä§ÌÜ†Ïñ¥ÏóêÏÑú ÎãâÎÑ§ÏûÑ ÏÑ§Ï†ï Ìï®Ïàò Í∞ÄÏ†∏Ïò§Í∏∞
  const { setSignupNickname } = useAuthStore();

  // ÎãâÎÑ§ÏûÑ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ (ÌïúÍ∏Ä, ÏòÅÏñ¥, Ïà´ÏûêÎßå ÌóàÏö©, 2~10Ïûê)
  useEffect(() => {
    const isValid = validateNickname(nickname);
    setIsNicknameValid(isValid);

    // ÏóêÎü¨ Î©îÏãúÏßÄ Ï≤òÎ¶¨
    if (nickname.length > 0) {
      if (nickname.length < 2) {
        setErrorMessage('ÎãâÎÑ§ÏûÑÏùÄ 2Ïûê Ïù¥ÏÉÅ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      } else if (nickname.length > 10) {
        setErrorMessage('ÎãâÎÑ§ÏûÑÏùÄ 10Ïûê Ïù¥ÌïòÎ°ú ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      } else if (!/^[Í∞Ä-Ìû£a-zA-Z0-9]+$/.test(nickname)) {
        setErrorMessage('ÎãâÎÑ§ÏûÑÏóêÎäî ÌïúÍ∏Ä, ÏòÅÏñ¥, Ïà´ÏûêÎßå ÏÇ¨Ïö© Í∞ÄÎä•Ìï©ÎãàÎã§.');
      } else {
        setErrorMessage('');
      }
    } else {
      setErrorMessage('');
    }
  }, [nickname]);

  const handleNext = () => {
    // Zustand Ïä§ÌÜ†Ïñ¥Ïóê ÎãâÎÑ§ÏûÑ Ï†ÄÏû•
    setSignupNickname(nickname);
    console.log('üîç ÎãâÎÑ§ÏûÑ Ï†ÄÏû•Îê®:', nickname);

    // Ï†ÄÏû• ÌõÑ Ïä§ÌÜ†Ïñ¥ ÏÉÅÌÉú ÌôïÏù∏
    const currentState = useAuthStore.getState();
    console.log('üîç ÎãâÎÑ§ÏûÑ Ï†ÄÏû• ÌõÑ Ïä§ÌÜ†Ïñ¥ ÏÉÅÌÉú:', currentState.signupData);

    // route.paramsÎ°ú Ïù¥Î©îÏùº, ÎπÑÎ∞ÄÎ≤àÌò∏, ÎãâÎÑ§ÏûÑ Ï†ÑÎã¨
    const { email, password } = route.params || {};
    navigation.navigate('ProfileImage', { email, password, nickname });
  };

  const clearNickname = () => {
    setNickname('');
  };

  return (
    <Container>
      <Header
        onBackPress={() => navigation.goBack()}
        rightComponent={<ProgressText>3/5</ProgressText>}
      />

      <Content>
        <Title>
          ÏÇ¨Ïö©ÏûêÎãòÏùÑ{'\n'}
          Ïñ¥ÎñªÍ≤å Î∂àÎü¨ÎìúÎ¶¨Î©¥ Îê†ÍπåÏöî?
        </Title>
        <ErrorContainer>
          {errorMessage ? <ErrorMessage>{errorMessage}</ErrorMessage> : null}
        </ErrorContainer>
      </Content>

      <CenterContent>
        <InputContainer>
          <CustomInput
            value={nickname}
            onChangeText={setNickname}
            placeholder="ÎãâÎÑ§ÏûÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."
            maxLength={10}
            onClear={clearNickname}
          />
        </InputContainer>
      </CenterContent>

      <ButtonWrapper>
        <CustomButton
          text="Îã§Ïùå"
          onPress={handleNext}
          disabled={!isNicknameValid}
          backgroundColor={
            isNicknameValid ? theme.colors.primary : theme.colors.gray200
          }
          textColor={
            isNicknameValid ? theme.colors.white : theme.colors.gray500
          }
        />
      </ButtonWrapper>
    </Container>
  );
};

export default NicknameScreen;

const Container = styled(SafeAreaView)`
  flex: 1;
  background-color: ${theme.colors.white};
`;

const ProgressText = styled.Text`
  font-size: 14px;
  font-family: ${theme.fonts.Regular};
  color: ${theme.colors.gray600};
`;

const Content = styled.View`
  padding: 24px;
`;

const Title = styled.Text`
  font-size: 24px;
  font-family: ${theme.fonts.Bold};
  color: ${theme.colors.gray900};
  line-height: 34px;
  margin-top: 16px;
  margin-bottom: 12px;
`;

const ErrorContainer = styled.View`
  height: 20px;
  justify-content: center;
`;

const ErrorMessage = styled.Text`
  font-size: 14px;
  font-family: ${theme.fonts.Regular};
  color: ${theme.colors.error};
`;

const CenterContent = styled.View`
  flex: 1;
  justify-content: flex-start;
  align-items: center;
  padding: 100px 24px 0 24px;
`;

const InputContainer = styled.View`
  width: 100%;
  position: relative;
`;

const ClearButton = styled.TouchableOpacity`
  position: absolute;
  right: 12px;
  top: 50%;
  transform: translateY(-10px);
`;

const ButtonWrapper = styled.View`
  padding: 24px;
`;
